// Generated by gencpp from file openlane_bag/Lane.msg
// DO NOT EDIT!


#ifndef OPENLANE_BAG_MESSAGE_LANE_H
#define OPENLANE_BAG_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <openlane_bag/LanePoint.h>

namespace openlane_bag
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : lane()
    , num_points(0)
    , attribute(0)
    , track_id(0)
    , category(0)  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : lane(_alloc)
    , num_points(0)
    , attribute(0)
    , track_id(0)
    , category(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::openlane_bag::LanePoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::openlane_bag::LanePoint_<ContainerAllocator> >> _lane_type;
  _lane_type lane;

   typedef int32_t _num_points_type;
  _num_points_type num_points;

   typedef int32_t _attribute_type;
  _attribute_type attribute;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef int32_t _category_type;
  _category_type category;





  typedef boost::shared_ptr< ::openlane_bag::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openlane_bag::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::openlane_bag::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::openlane_bag::Lane > LanePtr;
typedef boost::shared_ptr< ::openlane_bag::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openlane_bag::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openlane_bag::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openlane_bag::Lane_<ContainerAllocator1> & lhs, const ::openlane_bag::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.lane == rhs.lane &&
    lhs.num_points == rhs.num_points &&
    lhs.attribute == rhs.attribute &&
    lhs.track_id == rhs.track_id &&
    lhs.category == rhs.category;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openlane_bag::Lane_<ContainerAllocator1> & lhs, const ::openlane_bag::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openlane_bag

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::openlane_bag::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openlane_bag::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openlane_bag::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openlane_bag::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openlane_bag::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openlane_bag::Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openlane_bag::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc501fcdae255d97e8770b24dbfa3d94";
  }

  static const char* value(const ::openlane_bag::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc501fcdae255d97ULL;
  static const uint64_t static_value2 = 0xe8770b24dbfa3d94ULL;
};

template<class ContainerAllocator>
struct DataType< ::openlane_bag::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openlane_bag/Lane";
  }

  static const char* value(const ::openlane_bag::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openlane_bag::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LanePoint[] lane\n"
"int32 num_points\n"
"int32 attribute  # attribute: the left-left lane is 1, the left lane is 2, the right lane is 3, and the right-right lane is 4.\n"
"int32 track_id\n"
"int32 category\n"
"\n"
"================================================================================\n"
"MSG: openlane_bag/LanePoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 visibility\n"
;
  }

  static const char* value(const ::openlane_bag::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openlane_bag::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane);
      stream.next(m.num_points);
      stream.next(m.attribute);
      stream.next(m.track_id);
      stream.next(m.category);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openlane_bag::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openlane_bag::Lane_<ContainerAllocator>& v)
  {
    s << indent << "lane[]" << std::endl;
    for (size_t i = 0; i < v.lane.size(); ++i)
    {
      s << indent << "  lane[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::openlane_bag::LanePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.lane[i]);
    }
    s << indent << "num_points: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_points);
    s << indent << "attribute: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attribute);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "category: ";
    Printer<int32_t>::stream(s, indent + "  ", v.category);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENLANE_BAG_MESSAGE_LANE_H
