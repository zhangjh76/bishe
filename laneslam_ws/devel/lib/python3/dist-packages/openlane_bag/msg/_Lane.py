# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from openlane_bag/Lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import openlane_bag.msg

class Lane(genpy.Message):
  _md5sum = "bc501fcdae255d97e8770b24dbfa3d94"
  _type = "openlane_bag/Lane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LanePoint[] lane
int32 num_points
int32 attribute  # attribute: the left-left lane is 1, the left lane is 2, the right lane is 3, and the right-right lane is 4.
int32 track_id
int32 category

================================================================================
MSG: openlane_bag/LanePoint
float32 x
float32 y
float32 z
float32 visibility"""
  __slots__ = ['lane','num_points','attribute','track_id','category']
  _slot_types = ['openlane_bag/LanePoint[]','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane,num_points,attribute,track_id,category

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane is None:
        self.lane = []
      if self.num_points is None:
        self.num_points = 0
      if self.attribute is None:
        self.attribute = 0
      if self.track_id is None:
        self.track_id = 0
      if self.category is None:
        self.category = 0
    else:
      self.lane = []
      self.num_points = 0
      self.attribute = 0
      self.track_id = 0
      self.category = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.x, _x.y, _x.z, _x.visibility))
      _x = self
      buff.write(_get_struct_4i().pack(_x.num_points, _x.attribute, _x.track_id, _x.category))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane is None:
        self.lane = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane = []
      for i in range(0, length):
        val1 = openlane_bag.msg.LanePoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.z, _x.visibility,) = _get_struct_4f().unpack(str[start:end])
        self.lane.append(val1)
      _x = self
      start = end
      end += 16
      (_x.num_points, _x.attribute, _x.track_id, _x.category,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.lane)
      buff.write(_struct_I.pack(length))
      for val1 in self.lane:
        _x = val1
        buff.write(_get_struct_4f().pack(_x.x, _x.y, _x.z, _x.visibility))
      _x = self
      buff.write(_get_struct_4i().pack(_x.num_points, _x.attribute, _x.track_id, _x.category))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lane is None:
        self.lane = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.lane = []
      for i in range(0, length):
        val1 = openlane_bag.msg.LanePoint()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.z, _x.visibility,) = _get_struct_4f().unpack(str[start:end])
        self.lane.append(val1)
      _x = self
      start = end
      end += 16
      (_x.num_points, _x.attribute, _x.track_id, _x.category,) = _get_struct_4i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
