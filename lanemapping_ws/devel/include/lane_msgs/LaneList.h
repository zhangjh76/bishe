// Generated by gencpp from file lane_msgs/LaneList.msg
// DO NOT EDIT!


#ifndef LANE_MSGS_MESSAGE_LANELIST_H
#define LANE_MSGS_MESSAGE_LANELIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <lane_msgs/Lane.h>

namespace lane_msgs
{
template <class ContainerAllocator>
struct LaneList_
{
  typedef LaneList_<ContainerAllocator> Type;

  LaneList_()
    : header()
    , lane_list()
    , num_lanes(0)  {
    }
  LaneList_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lane_list(_alloc)
    , num_lanes(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::lane_msgs::Lane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lane_msgs::Lane_<ContainerAllocator> >> _lane_list_type;
  _lane_list_type lane_list;

   typedef int32_t _num_lanes_type;
  _num_lanes_type num_lanes;





  typedef boost::shared_ptr< ::lane_msgs::LaneList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lane_msgs::LaneList_<ContainerAllocator> const> ConstPtr;

}; // struct LaneList_

typedef ::lane_msgs::LaneList_<std::allocator<void> > LaneList;

typedef boost::shared_ptr< ::lane_msgs::LaneList > LaneListPtr;
typedef boost::shared_ptr< ::lane_msgs::LaneList const> LaneListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lane_msgs::LaneList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lane_msgs::LaneList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lane_msgs::LaneList_<ContainerAllocator1> & lhs, const ::lane_msgs::LaneList_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lane_list == rhs.lane_list &&
    lhs.num_lanes == rhs.num_lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lane_msgs::LaneList_<ContainerAllocator1> & lhs, const ::lane_msgs::LaneList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lane_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lane_msgs::LaneList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lane_msgs::LaneList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_msgs::LaneList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lane_msgs::LaneList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_msgs::LaneList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lane_msgs::LaneList_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lane_msgs::LaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c734ba2a0461f54efa410edc16ce01f";
  }

  static const char* value(const ::lane_msgs::LaneList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c734ba2a0461f54ULL;
  static const uint64_t static_value2 = 0xefa410edc16ce01fULL;
};

template<class ContainerAllocator>
struct DataType< ::lane_msgs::LaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lane_msgs/LaneList";
  }

  static const char* value(const ::lane_msgs::LaneList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lane_msgs::LaneList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Lane[] lane_list\n"
"int32 num_lanes\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: lane_msgs/Lane\n"
"LanePoint[] lane\n"
"int32 num_points\n"
"int32 attribute  # attribute: the left-left lane is 1, the left lane is 2, the right lane is 3, and the right-right lane is 4.\n"
"int32 track_id\n"
"int32 category\n"
"\n"
"================================================================================\n"
"MSG: lane_msgs/LanePoint\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 visibility\n"
;
  }

  static const char* value(const ::lane_msgs::LaneList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lane_msgs::LaneList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lane_list);
      stream.next(m.num_lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lane_msgs::LaneList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lane_msgs::LaneList_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lane_list[]" << std::endl;
    for (size_t i = 0; i < v.lane_list.size(); ++i)
    {
      s << indent << "  lane_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lane_msgs::Lane_<ContainerAllocator> >::stream(s, indent + "    ", v.lane_list[i]);
    }
    s << indent << "num_lanes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_lanes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANE_MSGS_MESSAGE_LANELIST_H
